{"ast":null,"code":"var _s = $RefreshSig$();\n// creating a custom hook for pagination purposes which will return a pagination pill range\n\nimport { useMemo } from \"react\";\n\n// it'll take some values as input\nexport const usePagination = ({\n  totalCount,\n  //total number of items that are to be compiled\n  pageSize,\n  //max number of items allowed on a single page\n  currentPage //the value of curr page\n}) => {\n  _s();\n  // this will return an array which represents ui for our pagination component\n  const paginationRange = useMemo(() => {\n    const totalPages = Math.ceil(totalCount / pageSize); //count maximum pages possible\n\n    // method that returns an array from range [start,end]\n    const range = (start, end) => {\n      let ans = [];\n      for (var i = start; i <= end; i++) {\n        ans.push(i);\n      }\n      return ans;\n    };\n\n    //now at max we want to display 4 clickable buttons on a single page pill so\n    if (totalPages <= 4) return range(1, totalPages);\n    //else if the total pages is more than 5 we will have three possible states of our page pill UI\n    //1. Dots are at the end just before final page, this means that we are somewhere between the first 4 pages\n    //2. Dots are at the initial just after first page, this means we are somewhere between the last 5 pages\n    //3. Dots are at both the ends which means that we aren't at either positions, this starts at page 5,\n    //so now let's implement this logic\n    else {\n      if (currentPage >= 1 && currentPage < 4) {\n        return [...range(1, 4), \"...\", totalPages];\n      } else if (currentPage > totalPages - 4 && currentPage <= totalPages) {\n        return [1, \"...\", ...range(totalPages - 3, totalPages)];\n      } else {\n        return [1, \"...\", ...range(currentPage - 1, currentPage + 1), \"...\", totalPages];\n      }\n    }\n  }, []);\n  return paginationRange;\n};\n_s(usePagination, \"tLviJI6rwkyze3+kNwkFLwjvB48=\");","map":{"version":3,"names":["useMemo","usePagination","totalCount","pageSize","currentPage","_s","paginationRange","totalPages","Math","ceil","range","start","end","ans","i","push"],"sources":["D:/React projects/email-client/src/custom-hooks/pagination.js"],"sourcesContent":["// creating a custom hook for pagination purposes which will return a pagination pill range\r\n\r\nimport { useMemo } from \"react\";\r\n\r\n// it'll take some values as input\r\nexport const usePagination = ({\r\n  totalCount, //total number of items that are to be compiled\r\n  pageSize, //max number of items allowed on a single page\r\n  currentPage, //the value of curr page\r\n}) => {\r\n  // this will return an array which represents ui for our pagination component\r\n  const paginationRange = useMemo(() => {\r\n    const totalPages = Math.ceil(totalCount / pageSize); //count maximum pages possible\r\n\r\n    // method that returns an array from range [start,end]\r\n    const range = (start, end) => {\r\n      let ans = [];\r\n      for (var i = start; i <= end; i++) {\r\n        ans.push(i);\r\n      }\r\n      return ans;\r\n    };\r\n\r\n    //now at max we want to display 4 clickable buttons on a single page pill so\r\n    if (totalPages <= 4) return range(1, totalPages);\r\n    //else if the total pages is more than 5 we will have three possible states of our page pill UI\r\n    //1. Dots are at the end just before final page, this means that we are somewhere between the first 4 pages\r\n    //2. Dots are at the initial just after first page, this means we are somewhere between the last 5 pages\r\n    //3. Dots are at both the ends which means that we aren't at either positions, this starts at page 5,\r\n    //so now let's implement this logic\r\n    else {\r\n      if (currentPage >= 1 && currentPage < 4) {\r\n        return [...range(1, 4), \"...\", totalPages];\r\n      } else if (currentPage > totalPages - 4 && currentPage <= totalPages) {\r\n        return [1, \"...\", ...range(totalPages - 3, totalPages)];\r\n      } else {\r\n        return [\r\n          1,\r\n          \"...\",\r\n          ...range(currentPage - 1, currentPage + 1),\r\n          \"...\",\r\n          totalPages,\r\n        ];\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  return paginationRange;\r\n};\r\n"],"mappings":";AAAA;;AAEA,SAASA,OAAO,QAAQ,OAAO;;AAE/B;AACA,OAAO,MAAMC,aAAa,GAAGA,CAAC;EAC5BC,UAAU;EAAE;EACZC,QAAQ;EAAE;EACVC,WAAW,CAAE;AACf,CAAC,KAAK;EAAAC,EAAA;EACJ;EACA,MAAMC,eAAe,GAAGN,OAAO,CAAC,MAAM;IACpC,MAAMO,UAAU,GAAGC,IAAI,CAACC,IAAI,CAACP,UAAU,GAAGC,QAAQ,CAAC,CAAC,CAAC;;IAErD;IACA,MAAMO,KAAK,GAAGA,CAACC,KAAK,EAAEC,GAAG,KAAK;MAC5B,IAAIC,GAAG,GAAG,EAAE;MACZ,KAAK,IAAIC,CAAC,GAAGH,KAAK,EAAEG,CAAC,IAAIF,GAAG,EAAEE,CAAC,EAAE,EAAE;QACjCD,GAAG,CAACE,IAAI,CAACD,CAAC,CAAC;MACb;MACA,OAAOD,GAAG;IACZ,CAAC;;IAED;IACA,IAAIN,UAAU,IAAI,CAAC,EAAE,OAAOG,KAAK,CAAC,CAAC,EAAEH,UAAU,CAAC;IAChD;IACA;IACA;IACA;IACA;IAAA,KACK;MACH,IAAIH,WAAW,IAAI,CAAC,IAAIA,WAAW,GAAG,CAAC,EAAE;QACvC,OAAO,CAAC,GAAGM,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,EAAEH,UAAU,CAAC;MAC5C,CAAC,MAAM,IAAIH,WAAW,GAAGG,UAAU,GAAG,CAAC,IAAIH,WAAW,IAAIG,UAAU,EAAE;QACpE,OAAO,CAAC,CAAC,EAAE,KAAK,EAAE,GAAGG,KAAK,CAACH,UAAU,GAAG,CAAC,EAAEA,UAAU,CAAC,CAAC;MACzD,CAAC,MAAM;QACL,OAAO,CACL,CAAC,EACD,KAAK,EACL,GAAGG,KAAK,CAACN,WAAW,GAAG,CAAC,EAAEA,WAAW,GAAG,CAAC,CAAC,EAC1C,KAAK,EACLG,UAAU,CACX;MACH;IACF;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOD,eAAe;AACxB,CAAC;AAACD,EAAA,CA3CWJ,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}